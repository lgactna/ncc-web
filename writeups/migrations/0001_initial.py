# Generated by Django 3.2.5 on 2023-05-06 05:42

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import tinymce.models
import writeups.formatChecker
import writeups.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vanity_url', models.SlugField(help_text='The vanity URL (competition/...). Use dashes to separate words.', unique=True, verbose_name='Vanity URL')),
                ('name', models.CharField(help_text='The full name of the competition. 100 chars or less (enforced).', max_length=100, verbose_name='Competition name')),
                ('start_date', models.DateField(blank=True, help_text='Start date of (actual) competition.', null=True, verbose_name='Start date')),
                ('end_date', models.DateField(blank=True, help_text='End date of (actual) competition.', null=True, verbose_name='End date')),
                ('type', models.CharField(blank=True, choices=[('i', 'Individual'), ('t', 'Team')], default='i', help_text='Competition type (individual/team/etc.)', max_length=1)),
                ('format', models.CharField(default='CTF', help_text='Competition format (CTF/RvB/etc.)', max_length=20)),
                ('registration_link', models.URLField(blank=True, help_text='Registration link.', null=True)),
                ('competition_link', models.URLField(blank=True, help_text='Link to competition website.', null=True)),
                ('theme_color', models.CharField(default='002E62', help_text="The background color used for this competition. Enter as 6 hex characters. Please make sure there's sufficient contrast!", max_length=6, validators=[django.core.validators.RegexValidator('^[0-9a-fA-F]*$', 'Only valid hex characters allowed.'), django.core.validators.MinLengthValidator(6, message='Hex values must be exactly 6 in length.')])),
                ('meta_lead', models.CharField(help_text='The lead text shown in writeup previews and on social media (via the meta-description). Max of 150 characters.', max_length=150, verbose_name='Meta lead text')),
                ('content', tinymce.models.HTMLField(blank=True, help_text='A TinyMCE-driven field for the post content/body copy.', null=True, verbose_name='Page content')),
            ],
        ),
        migrations.CreateModel(
            name='HomepageHero',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('headline', models.CharField(help_text='The title of the hero to display.', max_length=50, verbose_name='Headline')),
                ('flavor_text', models.CharField(help_text='The flavor text to display below the main headline.', max_length=100, verbose_name='Flavor text')),
                ('is_active', models.BooleanField(help_text='Whether or not this hero should be shown in the homepage carousel.', verbose_name='Show?')),
                ('primary_button_url', models.URLField(blank=True, help_text='Where to link the primary button to. Make sure you define primary button text, too!', null=True, verbose_name='Primary button URL')),
                ('primary_button_text', models.CharField(blank=True, help_text='Button text for the primary button.', max_length=25, null=True, verbose_name='Primary button text')),
                ('background_image', models.ImageField(blank=True, null=True, upload_to='home-hero')),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(help_text='Display name used in your URL and in post authoring (if necessary). 35 characters max.', max_length=35, unique=True, verbose_name='Display name')),
                ('vanity_url', models.SlugField(help_text='The vanity URL (member/...). Use dashes to separate words.', unique=True, verbose_name='Vanity URL')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profiles')),
                ('title', models.CharField(blank=True, default='', help_text='Special title (e.g. President, Vice President, etc.).', max_length=35, verbose_name='Title')),
                ('use_display_name_in_posts', models.BooleanField(help_text='Whether to use the display name or your full name as the post author.', verbose_name='Use display name in posts')),
                ('content', tinymce.models.HTMLField(blank=True, help_text='A TinyMCE-driven field for the profile content.', null=True, verbose_name='Profile content')),
                ('meta_lead', models.CharField(help_text='The lead text shown on social media (via the meta-description). Max of 150 characters.', max_length=150, verbose_name='Meta lead text')),
                ('discord_tag', models.CharField(blank=True, help_text='Discord tag (with discriminator).', max_length=50, null=True, verbose_name='Discord tag')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='member', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vanity_url', models.SlugField(help_text='The vanity URL used for this tag.', unique=True, verbose_name='Vanity URL')),
                ('name', models.CharField(help_text='Name of the tag. 50 chars max.', max_length=50, verbose_name='Tag name')),
                ('short_desc', models.CharField(help_text='A short description of the tag. Also used in meta tags.', max_length=100, verbose_name='Short description')),
                ('icon', models.ImageField(blank=True, help_text='The icon to use for this tool.', null=True, upload_to='tag-icons', verbose_name='Icon')),
                ('content', tinymce.models.HTMLField(blank=True, help_text="A TinyMCE-driven field for the tag's page content.", null=True, verbose_name='Page content')),
                ('theme_color', models.CharField(default='002E62', help_text="The background color used for this competition. Enter as 6 hex characters. Please make sure there's sufficient contrast!", max_length=6, validators=[django.core.validators.RegexValidator('^[0-9a-fA-F]*$', 'Only valid hex characters allowed.'), django.core.validators.MinLengthValidator(6, message='Hex values must be exactly 6 in length.')])),
                ('display_as_main_category', models.BooleanField(help_text='If checked, this will be listed as one of the main categories on the main writeups listing page. Vanity only.', verbose_name='Display as main category?')),
                ('display_order', models.PositiveIntegerField(blank=True, help_text='The order to display tags in.', null=True, verbose_name='Display order.')),
            ],
        ),
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vanity_url', models.SlugField(help_text='The vanity URL (tool/...). Use dashes to separate words.', unique=True, verbose_name='Vanity URL')),
                ('name', models.CharField(help_text='Name of the tool. 50 chars max.', max_length=50, verbose_name='Tool name')),
                ('image', models.ImageField(blank=True, null=True, upload_to='tool-images')),
                ('content', tinymce.models.HTMLField(blank=True, help_text="A TinyMCE-driven field for the tool's page content.", null=True, verbose_name='Page content')),
                ('meta_lead', models.CharField(help_text='The lead text shown in writeup previews and on social media (via the meta-description). Max of 150 characters.', max_length=150, verbose_name='Meta lead text')),
                ('tags', models.ManyToManyField(related_name='tools', to='writeups.Tag')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vanity_url', models.SlugField(help_text='The vanity URL (writeups/...). Use dashes to separate words.', unique=True, verbose_name='Vanity URL')),
                ('post_time', models.DateTimeField(help_text='Date of initial posting.', verbose_name='Post time')),
                ('update_time', models.DateTimeField(blank=True, help_text='If updated, date of update. Can be empty.', null=True, verbose_name='Update time')),
                ('meta_lead', models.CharField(help_text='The lead text shown in writeup previews and on social media (via the meta-description). Max of 150 characters.', max_length=150, verbose_name='Meta lead text')),
                ('meta_image', models.ImageField(blank=True, null=True, upload_to='post-banners')),
                ('private', models.BooleanField(help_text='If a post is set to private, users must be logged in to view the post. Linking to the post will also hide its meta details.', verbose_name='Private?')),
                ('title', models.CharField(help_text="The post title; also used as the meta-title and the page title (with '| Nevada Cyber Club appended'). Max of 55 characters.", max_length=55, verbose_name='Post title')),
                ('content', tinymce.models.HTMLField(blank=True, help_text='A TinyMCE-driven field for the post content.', null=True, verbose_name='Post content')),
                ('challenge_files', writeups.formatChecker.SizeRestrictedFileField(blank=True, help_text="A compressed archive of this challenge's files. A 100MB limit is enforced.", null=True, upload_to=writeups.models.Post.make_challenge_filepath, verbose_name='Post files')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posts', to='writeups.member')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='writeups.competition')),
                ('core_tag', models.ForeignKey(blank=True, help_text='The primary tag to display for this post. Used for vanity only.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='writeups.tag', verbose_name='Core tag')),
                ('tags', models.ManyToManyField(blank=True, related_name='posts', to='writeups.Tag')),
                ('tools', models.ManyToManyField(blank=True, related_name='posts', to='writeups.Tool')),
            ],
        ),
        migrations.CreateModel(
            name='Placement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField(blank=True, help_text="This member/team's numerical placement. Can be blank if the competition hasn't happened yet.", validators=[django.core.validators.MinValueValidator(1, message='Placement must be positive!')], verbose_name='Placement')),
                ('team_name', models.CharField(blank=True, help_text="This team's name. It only serves a vanity purpose and has no functional relationships.", max_length=35, null=True, verbose_name='Team name')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='placements', to='writeups.competition')),
                ('member', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='placements', to='writeups.member')),
            ],
        ),
    ]
