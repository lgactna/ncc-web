# Generated by Django 4.1.3 on 2022-12-12 00:50

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [migrations.swappable_dependency(settings.AUTH_USER_MODEL)]

    operations = [
        migrations.CreateModel(
            name="Competition",
            fields=[
                (
                    "vanity_url",
                    models.SlugField(
                        help_text="The vanity URL (competition/...). Use dashes to separate words.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="Vanity URL",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The full name of the competition. 100 chars or less (enforced).",
                        max_length=100,
                        verbose_name="Competition name",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True,
                        help_text="Start date of (actual) competition.",
                        null=True,
                        verbose_name="Start date",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="End date of (actual) competition.",
                        null=True,
                        verbose_name="Start date",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[("i", "Individual"), ("t", "Team")],
                        default="i",
                        help_text="Competition type (individual/team/etc.)",
                        max_length=1,
                    ),
                ),
                (
                    "theme_color",
                    models.CharField(
                        default="002E62",
                        help_text="The background color used for this competition. Enter as 6 hex characters. Please make sure there's sufficient contrast!",
                        max_length=6,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9a-fA-F]*$", "Only valid hex characters allowed."
                            ),
                            django.core.validators.MinLengthValidator(
                                6, message="Hex values must be exactly 6 in length."
                            ),
                        ],
                    ),
                ),
                (
                    "meta_lead",
                    models.CharField(
                        help_text="The lead text shown in writeup previews and on social media (via the meta-description). Max of 150 characters.",
                        max_length=150,
                        verbose_name="Meta lead text",
                    ),
                ),
                (
                    "content",
                    tinymce.models.HTMLField(
                        help_text="A TinyMCE-driven field for the post content/body copy.",
                        verbose_name="Page content",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Member",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        help_text="Display name used in your URL and in post authoring (if necessary). 35 characters max.",
                        max_length=35,
                        unique=True,
                        verbose_name="Display name",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Special title (e.g. President, Vice President, etc.).",
                        max_length=35,
                        null=True,
                        verbose_name="Title",
                    ),
                ),
                (
                    "use_display_name_in_posts",
                    models.BooleanField(
                        help_text="Whether to use the display name or your full name as the post author.",
                        verbose_name="Use display name in posts",
                    ),
                ),
                (
                    "content",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="A TinyMCE-driven field for the profile content.",
                        null=True,
                        verbose_name="Profile content",
                    ),
                ),
                (
                    "meta_lead",
                    models.CharField(
                        help_text="The lead text shown on social media (via the meta-description). Max of 150 characters.",
                        max_length=150,
                        verbose_name="Meta lead text",
                    ),
                ),
                (
                    "discord_tag",
                    models.CharField(
                        blank=True,
                        help_text="Discord tag (with discriminator).",
                        max_length=50,
                        null=True,
                        verbose_name="Discord tag",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "name",
                    models.SlugField(
                        help_text="The name used for this tag. 20 characters max.",
                        max_length=20,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Tag name",
                    ),
                ),
                (
                    "theme_color",
                    models.CharField(
                        default="002E62",
                        help_text="The background color used for this competition. Enter as 6 hex characters. Please make sure there's sufficient contrast!",
                        max_length=6,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9a-fA-F]*$", "Only valid hex characters allowed."
                            ),
                            django.core.validators.MinLengthValidator(
                                6, message="Hex values must be exactly 6 in length."
                            ),
                        ],
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Tool",
            fields=[
                (
                    "vanity_url",
                    models.SlugField(
                        help_text="The vanity URL (tool/...). Use dashes to separate words.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="Vanity URL",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the tool. 50 chars max.",
                        max_length=50,
                        verbose_name="Tool name",
                    ),
                ),
                (
                    "content",
                    tinymce.models.HTMLField(
                        help_text="A TinyMCE-driven field for the tool's page content.",
                        verbose_name="Page content",
                    ),
                ),
                (
                    "meta_lead",
                    models.CharField(
                        help_text="The lead text shown in writeup previews and on social media (via the meta-description). Max of 150 characters.",
                        max_length=150,
                        verbose_name="Meta lead text",
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(related_name="tools", to="writeups.tag"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "vanity_url",
                    models.SlugField(
                        help_text="The vanity URL (writeups/...). Use dashes to separate words.",
                        primary_key=True,
                        serialize=False,
                        verbose_name="Vanity URL",
                    ),
                ),
                (
                    "post_time",
                    models.DateTimeField(
                        help_text="Date of initial posting.", verbose_name="Post time"
                    ),
                ),
                (
                    "update_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="If updated, date of update. Can be empty.",
                        null=True,
                        verbose_name="Update time",
                    ),
                ),
                (
                    "meta_lead",
                    models.CharField(
                        help_text="The lead text shown in writeup previews and on social media (via the meta-description). Max of 150 characters.",
                        max_length=150,
                        verbose_name="Meta lead text",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="The post title; also used as the meta-title and the page title (with '| Nevada Cyber Club appended'). Max of 55 characters.",
                        max_length=55,
                        verbose_name="Post title",
                    ),
                ),
                (
                    "content",
                    tinymce.models.HTMLField(
                        help_text="A TinyMCE-driven field for the post content.",
                        verbose_name="Post content",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="posts",
                        to="writeups.member",
                    ),
                ),
                (
                    "competition",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="posts",
                        to="writeups.competition",
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True, related_name="posts", to="writeups.tag"
                    ),
                ),
                (
                    "tools",
                    models.ManyToManyField(
                        blank=True, related_name="posts", to="writeups.tool"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Placement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rank",
                    models.IntegerField(
                        blank=True,
                        help_text="This member/team's numerical placement. Can be blank if the competition hasn't happened yet.",
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, message="Placement must be positive!"
                            )
                        ],
                        verbose_name="Placement",
                    ),
                ),
                (
                    "team_name",
                    models.CharField(
                        blank=True,
                        help_text="This team's name. It only serves a vanity purpose and has no functional relationships.",
                        max_length=35,
                        null=True,
                        verbose_name="Team name",
                    ),
                ),
                (
                    "competition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="placements",
                        to="writeups.competition",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="placements",
                        to="writeups.member",
                    ),
                ),
            ],
        ),
    ]
